{"version":3,"sources":["core/game.ts"],"names":[],"mappings":"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","file":"core/game.js","sourcesContent":["/// <reference path=\"_reference.ts\"/>\n\n// MAIN GAME FILE\n\n// THREEJS Aliases\nimport Scene = THREE.Scene;\nimport Renderer = THREE.WebGLRenderer;\nimport PerspectiveCamera = THREE.PerspectiveCamera;\nimport BoxGeometry = THREE.BoxGeometry;\nimport CubeGeometry = THREE.CubeGeometry;\nimport PlaneGeometry = THREE.PlaneGeometry;\nimport SphereGeometry = THREE.SphereGeometry;\nimport Geometry = THREE.Geometry;\nimport AxisHelper = THREE.AxisHelper;\nimport LambertMaterial = THREE.MeshLambertMaterial;\nimport MeshBasicMaterial = THREE.MeshBasicMaterial;\nimport Material = THREE.Material;\nimport Mesh = THREE.Mesh;\nimport Object3D = THREE.Object3D;\nimport SpotLight = THREE.SpotLight;\nimport PointLight = THREE.PointLight;\nimport AmbientLight = THREE.AmbientLight;\nimport Control = objects.Control;\nimport GUI = dat.GUI;\nimport Color = THREE.Color;\nimport Vector3 = THREE.Vector3;\nimport Face3 = THREE.Face3;\nimport Point = objects.Point;\nimport CScreen = config.Screen;\nimport Clock = THREE.Clock;\nimport FirstPersonControls = THREE.FirstPersonControls;\nimport Points = THREE.Points;\nimport PointsMaterial = THREE.PointsMaterial;\n\n//Custom Game Objects\nimport gameObject = objects.gameObject;\n\n// setup an IIFE structure (Immediately Invoked Function Expression)\nvar game = (() => {\n\n    var scene: Scene = new Scene();\n    var renderer: Renderer;\n    var camera: PerspectiveCamera;\n    var axes: AxisHelper;\n    var plane: Mesh;\n    var sphere: Mesh;\n    var sphereGeometry: SphereGeometry;\n    var sphereMaterial: LambertMaterial;\n    var ambientLight: AmbientLight;\n    var spotLight: SpotLight;\n    var pointLight: PointLight;\n    var control: Control;\n    var gui: GUI;\n    var stats: Stats;\n    var step: number = 0;\n    var clock: Clock;\n    var tower: Mesh;\n    var towerGeometry: CubeGeometry;\n    var towerMaterial: LambertMaterial;\n    var ground: Mesh;\n    var groundGeometry: PlaneGeometry;\n    var groundMaterial: LambertMaterial;\n    var particles: Geometry;\n    var particleCount: number;\n    var particleMaterial: PointsMaterial;\n    var particleSystem: Points;\n    var deltaTime:number;\n\n    function init() {\n        // Instantiate a new Scene object\n        //scene = new Scene();\n\n        // setup a THREE.JS Clock object\n        clock = new Clock();\n\n        setupRenderer(); // setup the default renderer\n\n        setupCamera(); // setup the camera\n\n        /* ENTER CODE HERE */\n\n        // Point Light\n        pointLight = new PointLight(0xffffff);\n        pointLight.position.set(-4, 6, -4);\n        scene.add(pointLight);\n        console.log(\"Added pointLight to scene\");\n\n        // Tower Object\n        towerGeometry = new CubeGeometry(2, 10, 2);\n        towerMaterial = new LambertMaterial({ color: 0xc9c9c9 });\n        tower = new Mesh(towerGeometry, towerMaterial);\n        tower.position.setY(5);\n        scene.add(tower);\n        console.log(\"Added Tower Object to scene\");\n\n        // Burnt Ground\n        groundGeometry = new PlaneGeometry(16, 16);\n        groundMaterial = new LambertMaterial({ color: 0xe75d14 });\n        ground = new Mesh(groundGeometry, groundMaterial);\n        ground.rotation.x = -0.5 * Math.PI;\n        scene.add(ground);\n        console.log(\"Added Burnt Ground to scene\");\n\n        // Particle System\n        particleCount = 20000;\n        particles = new Geometry();\n        for (var count: number = 0; count < particleCount; count++) {\n            var x = Math.random() * 400 - 200;\n            var y = Math.random() * 400 - 200;\n            var z = Math.random() * 400 - 200;\n\n            // Create the vertex\n            var particle = new THREE.Vector3(x, y, z);\n\n            // Add the vertex to the geometry\n            particles.vertices.push(particle);\n        }\n        particleMaterial = new PointsMaterial({\n            color: 0xffffff,\n            size: 2,\n            map: new THREE.TextureLoader().load(\"../../Assets/images/snowflake.png\"),\n            blending: THREE.AdditiveBlending,\n            transparent: true\n        });\n        particleSystem = new Points(particles, particleMaterial);\n        scene.add(particleSystem);\n\n        // Add Helper Axis\n        axes = new AxisHelper(30);\n        ground.add(axes);\n        console.log(\"Added Axis Helper Object to the ground\");\n\n        // add controls\n        gui = new GUI();\n        control = new Control(0.05, false);\n        addControl(control);\n\n        // Add framerate stats\n        addStatsObject();\n        console.log(\"Added Stats to scene...\");\n\n        document.body.appendChild(renderer.domElement);\n        gameLoop(); // render the scene\t\n    }\n\n    function addControl(controlObject: Control): void {\n        gui.add(controlObject, 'rotationSpeed', -0.5, 0.5);\n        gui.add(controlObject, \"toggle\");\n    }\n\n    function addStatsObject() {\n        stats = new Stats();\n        stats.setMode(0);\n        stats.domElement.style.position = 'absolute';\n        stats.domElement.style.left = '0px';\n        stats.domElement.style.top = '0px';\n        document.body.appendChild(stats.domElement);\n    }\n\n    function animateParticles() {\n            var verts = particleSystem.geometry.vertices;\n            for (var i = 0; i < verts.length; i++) {\n                var vert = verts[i];\n                if (vert.y < -200) {\n                    vert.y = Math.random() * 400 - 200;\n                }\n                vert.y = vert.y - (10 * deltaTime);\n            }\n            particleSystem.geometry.verticesNeedUpdate = true;\n\n        }\n\n    // Setup main game loop\n    function gameLoop(): void {\n        stats.update();\n        \n        deltaTime = clock.getDelta();\n        \n        tower.rotation.y += control.rotationSpeed;\n        \n        if (control.goDown) {\n            tower.position.y -= 0.1;\n        }\n\n        // move particles around\n        animateParticles();\n\n        // render using requestAnimationFrame\n        requestAnimationFrame(gameLoop);\n\n        // render the scene\n        renderer.render(scene, camera);\n    }\n\n    // Setup default renderer\n    function setupRenderer(): void {\n        renderer = new Renderer();\n        renderer.setClearColor(0x404040, 1.0);\n        renderer.setSize(CScreen.WIDTH, CScreen.HEIGHT);\n        //renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.shadowMap.enabled = true;\n        console.log(\"Finished setting up Renderer...\");\n    }\n\n    // Setup main camera for the scene\n    function setupCamera(): void {\n        camera = new PerspectiveCamera(35, config.Screen.RATIO, 0.1, 100);\n        camera.position.x = 15.3;\n        camera.position.y = 18.5;\n        camera.position.z = -28.7;\n        camera.rotation.set(-1.10305, 0.49742, -0.1396);\n        camera.lookAt(new Vector3(0, 0, 0));\n        console.log(\"Finished setting up Camera...\");\n    }\n\n    window.onload = init;\n\n    return {\n        scene: scene\n    }\n\n})();\n\n"],"sourceRoot":"/source/"}